name: frontend-build-and-deploy
run-name: Front-end build, test and deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main


jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: install dependencies
        run: npm ci
      - name: make sure it builds
        run: npm run build
#      - name: make sure the tests pass
#        run: npm run test
      - name: make sure it passes the linter
        run: npm run lint
      # https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts#uploading-build-and-test-artifacts
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: frontend/dist
          retention-days: 5
#      - name: Archive code coverage results
#        uses: actions/upload-artifact@v3
#        with:
#          name: code-coverage-report
#          path: output/test/code-coverage.html

  deploy:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    environment: dev
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: install dependencies
        run: npm ci
      - name: build
        run: npm run build
        env:
          VITE_BACKEND_GRAPHQL_ENDPOINT: ${{ vars.VITE_BACKEND_GRAPHQL_ENDPOINT }}
      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "AWS_SECRET_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_ENV"
          aws s3 sync ./dist s3://${{ vars.S3_BUCKET }} --debug --region us-west-2 --delete --acl public-read
      - name: Invalidate Cloudfront cache
        run: aws cloudfront create-invalidation --debug --distribution-id=${{vars.CLOUDFRONT_DISTRIBUTION}} --paths "/*"
